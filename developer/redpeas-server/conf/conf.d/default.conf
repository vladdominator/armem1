# nginx.vh.default.conf â€” docker-openresty
#
# This file is installed to:
# `/etc/nginx/conf.d/default.conf`
#
# It tracks the `server` section of the upstream OpenResty's `nginx.conf`.
#
# This config (and any other configs in `etc/nginx/conf.d/`) is loaded by
# default by the `include` directive in `/usr/local/openresty/nginx/conf/nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/ma..
#


upstream readiness-server{
server stm-readiness:3000;
}
upstream comments-server{
server stm-comments:3000;
}
upstream menu-server{
server stm-menu:3000;
}

server {
listen 80;

#charset koi8-r;
#access_log /var/log/nginx/host.access.log main;

location / {
root /usr/local/openresty/nginx/html;
index index.html index.htm;
ssi on;
}

location /api/v1/orders {
proxy_pass http://readiness-server;
}
location /api/v1/comments {
proxy_pass http://comments-server;
}
location /api/v1/menu {
proxy_pass http://menu-server;
}

location /templates {
root /usr/local/openresty/nginx;
}

location /api/test2{
root /usr/local/openresty/nginx/html;
}

location /api/test{

lua_code_cache on;

content_by_lua_block {
ngx.headers['Content-Type']='application/json'
ngx.say('[{"name":"maria"}, {"name":"ivan"}, {"name":"alex"}, {"name":"oleg"}]');
ngx.exit(200);
ngx.log(ngx.STDERR, '/test url processing');
}
}



location /orders{
default_type application/json;
lua_code_cache on;
content_by_lua_block {
response = ngx.location.capture (
'/api/v1/orders', {
always_forward_body = true,
copy_all_vars = true})

if response.status > 500 then
ngx.exit(response.status)
end

local cjson = require("cjson")
orders = cjson.decode(response.body)


local template = require "resty.template";
local template_string = ngx.location.capture("/templates/lua/orders.html")

template.render(template_string.body, {
items = orders
})
}}

location /menu{
default_type application/json;
lua_code_cache on;
content_by_lua_block {
response = ngx.location.capture (
'/api/v1/menu', {
always_forward_body = true,
copy_all_vars = true})

if response.status > 500 then
ngx.exit(response.status)
end

local cjson = require("cjson")
menu = cjson.decode(response.body)


local template = require "resty.template";
local template_string = ngx.location.capture("/templates/lua/menu.html")

template.render(template_string.body, {
items = menu
})
}}

location /comments{
default_type application/json;
lua_code_cache on;
content_by_lua_block {
response = ngx.location.capture (
'/api/v1/comments', {
always_forward_body = true,
copy_all_vars = true})

if response.status > 500 then
ngx.exit(response.status)
end

local cjson = require("cjson")
comments = cjson.decode(response.body)


local template = require "resty.template";
local template_string = ngx.location.capture("/templates/lua/comments.html")

template.render(template_string.body, {
items = comments
})
}}


location /test {
default_type application/json;
lua_code_cache on;
content_by_lua_block {
response = ngx.location.capture (
'/api/test2/test.json', {
always_forward_body = true,
copy_all_vars = true})

if response.status > 500 then
ngx.exit(response.status)
end

local cjson = require("cjson")
orders = cjson.decode(response.body)


local template = require "resty.template";
local template_string = ngx.location.capture("/templates/lua/test.html")

template.render(template_string.body, {
items = orders
})
}}







#error_page 404 /404.html;

# redirect server error pages to the static page /50x.html
#
error_page 500 502 503 504 /50x.html;
location = /50x.html {
root /usr/local/openresty/nginx/html;
}

# proxy the PHP scripts to Apache listening on 127.0.0.1:80
#
#location ~ \.php$ {
# proxy_pass http://127.0.0.1;
#}

# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
#
#location ~ \.php$ {
# root /usr/local/openresty/nginx/html;
# fastcgi_pass 127.0.0.1:9000;
# fastcgi_index index.php;
# fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name;
# include fastcgi_params;
#}

# deny access to .htaccess files, if Apache's document root
# concurs with nginx's one
#
#location ~ /\.ht {
# deny all;
#}
}